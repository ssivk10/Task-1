//1
public boolean firstLast6(int[] nums) {
  return (nums[0]==6 || nums[nums.length-1]==6)?true:false;
}


//2
public boolean sameFirstLast(int[] nums) {
  return (nums.length>=1 && (nums[0]==nums[nums.length-1]))?true:false;
}


//3
public int[] makePi() {
  return new int[]{3,1,4};
}


//4
public boolean commonEnd(int[] a, int[] b) {
  return (a[0]==b[0]||a[a.length-1]==b[b.length-1])?true:false;
}


//5
public int sum3(int[] nums) {
  return nums[0]+nums[1]+nums[2];
  
}

//6
public int[] rotateLeft3(int[] nums) {
  return new int[] {nums[1], nums[2], nums[0]};
}


//7
public int[] reverse3(int[] nums) {
  return new int[] {nums[2], nums[1], nums[0]};
}


//8
public int[] maxEnd3(int[] nums) {
  if(nums[0]>nums[2])
  {
    nums[1]=nums[2]=nums[0];
  }
  else
  nums[1]=nums[0]=nums[2];
  return nums;
}


//9
public int sum2(int[] nums) {
  if(nums.length>=2)
  return nums[0]+nums[1];
  else if(nums.length==1)
  return nums[0];
  else return 0;
}


//10
public int[] middleWay(int[] a, int[] b) {
  return new int[]{a[1], b[1]};
}

//11
public int[] makeEnds(int[] nums) {
  return new int[]{nums[0], nums[nums.length-1]};
}


//12
public boolean has23(int[] nums) {
  if((nums[0]==2||nums[0]==3)||(nums[1]==2||nums[1]==3))
  return true;
  return false;
}

//13
public boolean no23(int[] nums) {
  if(!(nums[0]==2||nums[0]==3)&&!(nums[1]==2||nums[1]==3))
  return true;
  return false;
}

//14
public int[] makeLast(int[] nums) {
  int[] x = new int[nums.length*2];
  x[x.length-1]=nums[nums.length-1];
  return x;
}

//15
public boolean double23(int[] nums) {
  int two=0,three=0;
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]==2)
    two++;
    if(nums[i]==3)
    three++;
  }
  return (two==2 || three==2)?true:false;
}


//16
public int[] fix23(int[] nums) {
  if(nums[0]==2 && nums[1]==3)
  nums[1]=0;
  else if(nums[1]==2 && nums[2]==3)
  nums[2]=0;
  return nums;
}

//17
public int start1(int[] a, int[] b) {
  int c=0;
  if(a.length>=1 && a[0]==1)c++;
  if(b.length>=1 && b[0]==1)c++;
  return c;
}


//18
public int[] biggerTwo(int[] a, int[] b) {
  int s1=a[0]+a[1],s2=b[0]+b[1];
  if(s1>s2) return a;
  if(s2>s1)return b;
  return a;
}


//19
public int[] makeMiddle(int[] nums) {
  int l = (nums.length-1)/2;
  return new int[]{nums[l], nums[l+1]};
}


//20
public int[] plusTwo(int[] a, int[] b) {
  int [] x = new int [4];
  x[0]=a[0];
  x[1]=a[1];
  x[2]=b[0];
  x[3]=b[1];
  return x;
}

//21
public int[] swapEnds(int[] nums) {
  int t;
  if(nums.length>=2)
  {
    t=nums[0];
    nums[0]=nums[nums.length-1];
    nums[nums.length-1]=t;
  }
  return nums;
}


//22
public int[] midThree(int[] nums) {
  int l=(nums.length-1)/2;
  return new int[]{nums[l-1], nums[l], nums[l+1]};
}

//23
public int maxTriple(int[] nums) {
  int l=nums.length-1;
  if(nums[0]>nums[l/2] && nums[0]>nums[l])
  return nums[0];
  else if(nums[l/2]>nums[0] && nums[l/2]>nums[l])
  return nums[l/2];
  else
  return nums[l];
}

//24
public int[] frontPiece(int[] nums) {
  if(nums.length>=2)
  return new int[]{nums[0], nums[1]};
  return nums.length==1?new int[]{nums[0]}:new int [] {};
}

//25
public boolean unlucky1(int[] nums) {
  if(nums.length>=2)
  {
   if((nums[0]==1 && nums[1]==3)||(nums[1]==1&&nums[2]==3)||(nums[nums.length-2]==1&&nums[nums.length-1]==3))
  return true; 
  }
  return false;
}


//26
public int[] make2(int[] a, int[] b) {
  if(a.length>=2)
  return new int[]{a[0], a[1]};
  else if(a.length==1)
  return new int[]{a[0], b[0]};
  else
  return new int[]{b[0], b[1]};
}


//27
public int[] front11(int[] a, int[] b) {
  int[] x=new int[2]; 
  int c=0;
  if(a.length>=1&&b.length>=1)
  return new int[] {a[0], b[0]};
  else if(a.length==0 && b.length!=0)
  return new int[]{b[0]};
  else if(b.length==0 && a.length!=0)
  return new int[] {a[0]};
  return new int[]{};
}


