//1
public int countEvens(int[] nums) {
  int c=0;
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]%2==0)c++;
  }
  return c;
}


//2
public int bigDiff(int[] nums) {
  int big=0,small=0;
  if(nums.length>=1)
  {
    small=big=nums[0];
  }
  for(int i=1;i<nums.length;i++)
  {
    if(nums[i]<small)small=nums[i];
    if(nums[i]>big)big=nums[i];
  }
  return big-small;
}


//3
public int centeredAverage(int[] nums) {
  Arrays.sort(nums);
  int l = nums.length;
  if(l%2==0)
  {
    return (nums[(l-1)/2]+nums[((l-1)/2)+1])/2;
  }
  else
  return nums[(l-1)/2];
}


//4
public int sum13(int[] nums) {
  int s=0;
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]==13)i++;
    else s+=nums[i];
  }
  return s;
}


//5
public int sum67(int[] nums) {
  int f=0, s=0;
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]==6)
    {
      f=1;
    }
    if(f==0 || f==2)
    s+=nums[i];
    if(f==1 && nums[i]==7)
    {
      f=2;
    }
  }
  return s;
}


//6
public boolean has22(int[] nums) {
  for(int i=0;i+1<nums.length;i++)
  {
    if(nums[i]==2&&nums[i+1]==2)return true;
  }
  return false;
}


//7
public boolean lucky13(int[] nums) {
  boolean flag=true;
  for (int i=0;i<nums.length;i++)
  {
    if(nums[i]==1||nums[i]==3)
    {
      flag=false;
      break;
    }
  }
  return flag;
}


//8
public boolean sum28(int[] nums) {
  int s=0;
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]==2)s+=2;
  }
  return s==8?true:false;
}


//9
public boolean more14(int[] nums) {
  int c1=0, c4=0;
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]==1)c1++;
    if(nums[i]==4)c4++;
  }
  return c1>c4?true:false;
}


//10
public int[] fizzArray(int n) {
  
}


//11
public boolean only14(int[] nums) {
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]!=1 && nums[i]!=4)
    return false;
  }
  return true;
}


//12
public String[] fizzArray2(int n) {
  String [] s = new String[n];
  for(int i = 0;i<n;i++)
  {
    s[i]=String.valueOf(i);
  }
  return s;
}


//13
public boolean no14(int[] nums) {
  
}


//14
public boolean isEverywhere(int[] nums, int val) {
  int i=0;
  if(nums.length>=1 && nums[0]!=val)
  i=1;
  for(;i<nums.length;i+=2)
  if(nums[i]!=val)
  return false;
  return true;
}


//15
public boolean either24(int[] nums) {
  int two=0,four=0;
  for(int i=0;i+1<nums.length;i++)
  {
    if(nums[i]==2 && nums[i+1]==2)
    two=1;
    if(nums[i]==4 && nums[i+1]==4)
    four=1;
  }
  return (four==two)?false:true;
}


//16
public int matchUp(int[] nums1, int[] nums2) {
  
}


//17
public boolean has77(int[] nums) {
  
}


//18
public boolean has12(int[] nums) {
  int f=0;
  
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]==1)
    f++;
    if(f>=1 && nums[i]==2)
    return true;
  }
  return false;
}


//19
public boolean modThree(int[] nums) {
  
}


//20
public boolean haveThree(int[] nums) {
  
}


//21
public boolean twoTwo(int[] nums) {
  for(int i=1;i+1<nums.length;i++)
  {
    if(nums[i]==2)
    if(nums[i+1]!=2&&nums[i-1]!=2)
    return false;
  }
  return true;
}

//22
public boolean sameEnds(int[] nums, int len) {
  
}


//23
public boolean tripleUp(int[] nums) {
  if(nums.length>=3)
  for(int i=0;i+2<nums.length;i++)
  if(nums[i+1]==nums[i]+1 && nums[i+2]==nums[i]+2)
  return true;
  return false;
}


//24
public int[] fizzArray3(int start, int end) {
  
}


//25
public int[] shiftLeft(int[] nums) {
  int t=0, i;
  if(nums.length>=2)
  {
    t=nums[0];
    for(i=1;i<nums.length;i++)
    {
      nums[i-1]=nums[i];
    }
    nums[i-1]=t;
  }
  return nums;
}


//26
public int[] tenRun(int[] nums) {
  
}


//27
public int[] pre4(int[] nums) {
  int [] a = new int [nums.length-1];
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]==4)break;
    else a[i]=nums[i];
  }
  return a;
}


//28
public int[] post4(int[] nums) {
  int i,j,c=0;
  for(i=nums.length-1;i>=0;i--)
  {
    if(nums[i]==4)break;
  }
  int [] a = new int [nums.length-1-i];
  for(j=i+1;j<nums.length;j++)
  {
    a[c++]=nums[j];
  }
  return a;
}


//29
public int[] notAlone(int[] nums, int val) {
  
}


//30
public int[] zeroFront(int[] nums) {
  
}


//31
public int[] withoutTen(int[] nums) {
  
}

//32
public int[] zeroMax(int[] nums) {
  int big;
  for(int i=0;i<nums.length;i++)
  {//big=Integer.MIN_VALUE+1;
    big=0;
    if(nums[i]==0)
    {
      for(int j=i+1;j<nums.length;j++)
    {
      if(nums[j]>big && nums[j]%2==1)
      big=nums[j];
    }
    nums[i]=big;
    }
    
  }
  return nums;
}

//33
public int[] evenOdd(int[] nums) {
  int [] a = new int [nums.length];
  int j=0;
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]%2==0)
    a[j++]=nums[i];
  }
  for(int i=0;i<nums.length;i++)
  {
    if(nums[i]%2==1)
    a[j++]=nums[i];
  }
  return a;
}

//34
public String[] fizzBuzz(int start, int end) {
  
}

//35






